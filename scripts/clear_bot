#!/usr/bin/python3

import sys
import telethon
import json

assert len(
    sys.argv
) >= 2, "you have to set *.json file with creds as first argument of the program"

cred_filename = sys.argv[1]
cred_file = open(cred_filename, "r")
cred_obj = json.load(cred_file)
cred_file.close()

client_session_name = cred_obj["client_session_name"]
bot_session_name = cred_obj["bot_session_name"]

api_id = cred_obj["api_id"]
api_hash = cred_obj["api_hash"]
bot_token = cred_obj["bot_token"]

bot = telethon.TelegramClient(bot_session_name, api_id,
                              api_hash).start(bot_token=bot_token)
client = telethon.TelegramClient(client_session_name, api_id, api_hash)

description = """
Hello, I'm a clear bot.
Just print /clear command for remove all history from the chat
"""


@bot.on(telethon.events.NewMessage(pattern="/start"))
async def start(event):
  await event.respond(description)
  raise telethon.events.StopPropagation


async def is_admin(chat_id: str, user_id: str) -> bool:
  # check connection
  await client.connect()

  is_admin = False

  async for user in client.iter_participants(
      entity=chat_id, filter=telethon.types.ChannelParticipantsAdmins):
    if (user.id == user_id):
      is_admin = True
      break

  return is_admin


async def remove_chat_history(chat_id: str) -> None:
  # check connection
  await client.connect()

  # get list message ids for removing
  list_for_remove = []
  async for message in client.iter_messages(chat_id):
    list_for_remove.append(message.id)

  # remove messages at once
  await client.delete_messages(entity=chat_id, message_ids=list_for_remove)


@bot.on(telethon.events.NewMessage(pattern="/clear"))
async def clear(event: telethon.events.NewMessage.Event):
  try:
    chat_id = event.chat_id
    last_message_id = event.message.id
    current_user_id = int(event.from_id.user_id)

    if await is_admin(chat_id, current_user_id) == False:
      await event.respond("sorry, but you are not admin of the chat")
      raise telethon.events.StopPropagation

    await remove_chat_history(chat_id)

    # finish
    await event.respond("done")
    raise telethon.events.StopPropagation

  except telethon.events.StopPropagation:
    raise
  except:
    print(sys.exc_info())
    await event.respond("some error caused")
    raise


async def check_user_athorization(user_client):
  await user_client.connect()
  assert await user_client.is_user_authorized(), """
This script need authorized session file, so start another script:
auth_session - for create authorized session
"""


def main():
  client.loop.run_until_complete(check_user_athorization(client))

  # run the bot
  bot.run_until_disconnected()


main()
